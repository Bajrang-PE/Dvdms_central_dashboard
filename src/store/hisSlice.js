import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  showDataTable: false,
  selectedOption: [],
  actionMode: 'home',
  activeTab: undefined,
  theme: 'Default',
  mainDashData: null,
  confirmSave: false,
  showConfirmSave: false,
  loading: false,
  singleConfigData: undefined,
  prevKpiTab: [],
  paramsValues: { tabParams: {}, widgetParams: {} },
  paramsValuesPro: { tabParams: {}, widgetParams: {} },
  isSearchQuery: false,
  presentWidgets: [],
  parameterData: [],
  allWidgetData: [],
  dataServiceData: [],
  allTabsData: [],
  userServiceData: [],
  dashboardData: [],
  dashboardSubmenuData: [],
  dashboardForDt: [],
  parameterDrpData: [],
  widgetDrpData: [],
  tabDrpData: [],
  dataServiceDrpData: [],
  serviceCategoryDrpData: [],
};

const hisSlice = createSlice({
  name: 'his',
  initialState,
  reducers: {
    setShowDataTable(state, action) { state.showDataTable = action.payload; },
    setSelectedOption(state, action) { state.selectedOption = action.payload; },
    setActionMode(state, action) { state.actionMode = action.payload; },
    setActiveTab(state, action) { state.activeTab = action.payload; },
    setTheme(state, action) { state.theme = action.payload; },
    setMainDashData(state, action) { state.mainDashData = action.payload; },
    setConfirmSave(state, action) { state.confirmSave = action.payload; },
    setShowConfirmSave(state, action) { state.showConfirmSave = action.payload; },
    setLoading(state, action) { state.loading = action.payload; },
    setSingleConfigData(state, action) { state.singleConfigData = action.payload; },
    setPrevKpiTab(state, action) { state.prevKpiTab = action.payload; },
    setParamsValues(state, action) { state.paramsValues = action.payload; },
    setParamsValuesPro(state, action) { state.paramsValuesPro = action.payload; },
    setIsSearchQuery(state, action) { state.isSearchQuery = action.payload; },
    setPresentWidgets(state, action) { state.presentWidgets = action.payload; },
    setParameterData(state, action) { state.parameterData = action.payload; },
    setAllWidgetData(state, action) { state.allWidgetData = action.payload; },
    setDataServiceData(state, action) { state.dataServiceData = action.payload; },
    setAllTabsData(state, action) { state.allTabsData = action.payload; },
    setUserServiceData(state, action) { state.userServiceData = action.payload; },
    setDashboardData(state, action) { state.dashboardData = action.payload; },
    setDashboardSubmenuData(state, action) { state.dashboardSubmenuData = action.payload; },
    setDashboardForDt(state, action) { state.dashboardForDt = action.payload; },
    setParameterDrpData(state, action) { state.parameterDrpData = action.payload; },
    setWidgetDrpData(state, action) { state.widgetDrpData = action.payload; },
    setTabDrpData(state, action) { state.tabDrpData = action.payload; },
    setDataServiceDrpData(state, action) { state.dataServiceDrpData = action.payload; },
    setServiceCategoryDrpData(state, action) { state.serviceCategoryDrpData = action.payload; },
    // Add more reducers as needed
  },
});

export const {
  setShowDataTable,
  setSelectedOption,
  setActionMode,
  setActiveTab,
  setTheme,
  setMainDashData,
  setConfirmSave,
  setShowConfirmSave,
  setLoading,
  setSingleConfigData,
  setPrevKpiTab,
  setParamsValues,
  setParamsValuesPro,
  setIsSearchQuery,
  setPresentWidgets,
  setParameterData,
  setAllWidgetData,
  setDataServiceData,
  setAllTabsData,
  setUserServiceData,
  setDashboardData,
  setDashboardSubmenuData,
  setDashboardForDt,
  setParameterDrpData,
  setWidgetDrpData,
  setTabDrpData,
  setDataServiceDrpData,
  setServiceCategoryDrpData,
} = hisSlice.actions;

export default hisSlice.reducer;
